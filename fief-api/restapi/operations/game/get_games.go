// Code generated by go-swagger; DO NOT EDIT.

package game

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetGamesHandlerFunc turns a function with the right signature into a get games handler
type GetGamesHandlerFunc func(GetGamesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGamesHandlerFunc) Handle(params GetGamesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetGamesHandler interface for that can handle valid get games params
type GetGamesHandler interface {
	Handle(GetGamesParams, interface{}) middleware.Responder
}

// NewGetGames creates a new http.Handler for the get games operation
func NewGetGames(ctx *middleware.Context, handler GetGamesHandler) *GetGames {
	return &GetGames{Context: ctx, Handler: handler}
}

/* GetGames swagger:route GET /games game getGames

List existing games

*/
type GetGames struct {
	Context *middleware.Context
	Handler GetGamesHandler
}

func (o *GetGames) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetGamesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
