// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GamesSuccess games success
//
// swagger:model GamesSuccess
type GamesSuccess struct {

	// Game created but waiting for enough players
	Available []*GameInfo `json:"available"`

	// Games joined by the current player
	Joined []*GameInfo `json:"joined"`
}

// Validate validates this games success
func (m *GamesSuccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoined(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamesSuccess) validateAvailable(formats strfmt.Registry) error {
	if swag.IsZero(m.Available) { // not required
		return nil
	}

	for i := 0; i < len(m.Available); i++ {
		if swag.IsZero(m.Available[i]) { // not required
			continue
		}

		if m.Available[i] != nil {
			if err := m.Available[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("available" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GamesSuccess) validateJoined(formats strfmt.Registry) error {
	if swag.IsZero(m.Joined) { // not required
		return nil
	}

	for i := 0; i < len(m.Joined); i++ {
		if swag.IsZero(m.Joined[i]) { // not required
			continue
		}

		if m.Joined[i] != nil {
			if err := m.Joined[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("joined" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this games success based on the context it is used
func (m *GamesSuccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJoined(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GamesSuccess) contextValidateAvailable(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Available); i++ {

		if m.Available[i] != nil {
			if err := m.Available[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("available" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GamesSuccess) contextValidateJoined(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Joined); i++ {

		if m.Joined[i] != nil {
			if err := m.Joined[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("joined" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GamesSuccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GamesSuccess) UnmarshalBinary(b []byte) error {
	var res GamesSuccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
