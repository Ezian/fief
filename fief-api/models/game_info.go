// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GameInfo General information about existing games
//
// swagger:model GameInfo
type GameInfo struct {

	// UID of the game
	// Required: true
	ID *string `json:"id"`

	// If the current user as joined this game
	Joined bool `json:"joined,omitempty"`

	// Human readable name of the game
	// Required: true
	Name *string `json:"name"`

	// players
	// Required: true
	Players *GameInfoPlayers `json:"players"`

	// A simple string describing the status (defined on server side)
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this game info
func (m *GameInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GameInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GameInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GameInfo) validatePlayers(formats strfmt.Registry) error {

	if err := validate.Required("players", "body", m.Players); err != nil {
		return err
	}

	if m.Players != nil {
		if err := m.Players.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("players")
			}
			return err
		}
	}

	return nil
}

func (m *GameInfo) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this game info based on the context it is used
func (m *GameInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GameInfo) contextValidatePlayers(ctx context.Context, formats strfmt.Registry) error {

	if m.Players != nil {
		if err := m.Players.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("players")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GameInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GameInfo) UnmarshalBinary(b []byte) error {
	var res GameInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GameInfoPlayers game info players
//
// swagger:model GameInfoPlayers
type GameInfoPlayers struct {

	// Current count of players who have joined the game
	// Required: true
	Joined *float64 `json:"joined"`

	// Total players required to launch the game
	// Required: true
	Required *float64 `json:"required"`
}

// Validate validates this game info players
func (m *GameInfoPlayers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJoined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GameInfoPlayers) validateJoined(formats strfmt.Registry) error {

	if err := validate.Required("players"+"."+"joined", "body", m.Joined); err != nil {
		return err
	}

	return nil
}

func (m *GameInfoPlayers) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("players"+"."+"required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this game info players based on context it is used
func (m *GameInfoPlayers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GameInfoPlayers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GameInfoPlayers) UnmarshalBinary(b []byte) error {
	var res GameInfoPlayers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
